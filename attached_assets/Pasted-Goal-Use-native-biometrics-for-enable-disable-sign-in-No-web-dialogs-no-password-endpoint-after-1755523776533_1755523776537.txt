Goal: Use native biometrics for enable/disable + sign-in. No web dialogs, no password endpoint after biometric success.

Stack: React Native (Expo). Add:

expo install expo-local-authentication expo-secure-store


Requirements

Settings → Enable Biometrics

Check hardware & enrollment.

Prompt Face/Touch ID.

On success: request a device token from backend for the current user and store it securely.

Toggle shows on/off state based on stored token.

Login → Use Biometrics

Show if a device token exists.

Prompt Face/Touch ID; if success, exchange the device token with backend for a session.

Do not call the password login endpoint.

Disable Biometrics

Remove device token from secure storage and revoke it server-side.

Web preview fallback

If running on web, hide biometric UI or show “Available on mobile only”.

No alerts/confirm popups. Use toasts or inline messages.

1) Biometrics service (drop in /src/services/biometrics.ts)
// /src/services/biometrics.ts
import * as LocalAuthentication from 'expo-local-authentication';
import * as SecureStore from 'expo-secure-store';
import { Platform } from 'react-native';

const TOKEN_KEY = 'thryvin_device_token_v1';
const ENABLED_KEY = 'thryvin_biometrics_enabled_v1';

export async function isNativeSupported() {
  if (Platform.OS === 'web') return false;
  const hasHw = await LocalAuthentication.hasHardwareAsync();
  const isEnrolled = await LocalAuthentication.isEnrolledAsync();
  return hasHw && isEnrolled;
}

export async function getEnabled(): Promise<boolean> {
  const v = await SecureStore.getItemAsync(ENABLED_KEY);
  return v === 'true';
}

export async function enableBiometrics(userId: string) {
  if (!(await isNativeSupported())) {
    throw new Error("Biometrics not supported or not enrolled on this device.");
  }
  const res = await LocalAuthentication.authenticateAsync({
    promptMessage: "Enable Thryvin’ biometrics",
    fallbackLabel: "Use passcode",
    disableDeviceFallback: false,
  });
  if (!res.success) throw new Error("Authentication cancelled or failed.");

  // TODO: call your backend to mint a device-bound token for this user.
  // Example POST /auth/biometrics/register { userId, deviceInfo }
  const deviceToken = await fakeMintDeviceToken(userId); // replace with real API

  await SecureStore.setItemAsync(TOKEN_KEY, deviceToken);
  await SecureStore.setItemAsync(ENABLED_KEY, 'true');
}

export async function disableBiometrics(userId: string) {
  const token = await SecureStore.getItemAsync(TOKEN_KEY);
  if (token) {
    // TODO: revoke on backend: POST /auth/biometrics/revoke { userId, token }
    await fakeRevokeDeviceToken(userId, token); // replace with real API
  }
  await SecureStore.deleteItemAsync(TOKEN_KEY);
  await SecureStore.setItemAsync(ENABLED_KEY, 'false');
}

export async function biometricLogin() {
  const supported = await isNativeSupported();
  if (!supported) throw new Error("Biometrics unavailable.");
  const token = await SecureStore.getItemAsync(TOKEN_KEY);
  if (!token) throw new Error("No device token on this device. Enable in Settings.");

  const res = await LocalAuthentication.authenticateAsync({
    promptMessage: "Sign in with Face/Touch ID",
    fallbackLabel: "Use passcode",
    disableDeviceFallback: false,
  });
  if (!res.success) throw new Error("Authentication cancelled or failed.");

  // Exchange device token for a session:
  // POST /auth/biometrics/login { deviceToken } -> { accessToken, user }
  const session = await fakeLoginWithDeviceToken(token); // replace with real API
  return session; // { accessToken, user }
}

/* ------- TEMP demo stubs (replace with your real API calls) ------- */
async function fakeMintDeviceToken(userId: string) {
  // You should return a unique, revocable token bound to this device.
  return `devtok_${userId}_${Date.now()}`;
}
async function fakeRevokeDeviceToken(_userId: string, _token: string) {
  return true;
}
async function fakeLoginWithDeviceToken(token: string) {
  return { accessToken: `sess_${token}`, user: { id: 'demo', name: 'Jake' } };
}

2) Settings toggle (replace your current button)
// /src/screens/SettingsScreen.tsx
import React, { useEffect, useState } from 'react';
import { View, Text, Switch, Alert, Platform } from 'react-native';
import { enableBiometrics, disableBiometrics, getEnabled, isNativeSupported } from '../services/biometrics';

export default function SettingsScreen({ user }: { user: { id: string } }) {
  const [supported, setSupported] = useState<boolean>(false);
  const [enabled, setEnabled] = useState<boolean>(false);
  const isWeb = Platform.OS === 'web';

  useEffect(() => {
    (async () => {
      setSupported(await isNativeSupported());
      setEnabled(await getEnabled());
    })();
  }, []);

  const onToggle = async (value: boolean) => {
    try {
      if (value) {
        await enableBiometrics(user.id);
        setEnabled(true);
      } else {
        await disableBiometrics(user.id);
        setEnabled(false);
      }
    } catch (e: any) {
      Alert.alert("Biometrics", e.message ?? "Something went wrong.");
    }
  };

  return (
    <View style={{ padding: 20 }}>
      <Text style={{ fontSize: 20, fontWeight: '600', marginBottom: 12 }}>Security</Text>

      <View style={{ flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between', paddingVertical: 12 }}>
        <View style={{ flex: 1, paddingRight: 16 }}>
          <Text style={{ fontSize: 16, fontWeight: '500' }}>Enable biometric login</Text>
          <Text style={{ color: '#6B7280', marginTop: 4 }}>
            Use Face ID / Touch ID to sign in on this device.
          </Text>
          {isWeb && (
            <Text style={{ marginTop: 8, color: '#EF4444' }}>
              Biometrics available on the mobile build. Hidden on web preview.
            </Text>
          )}
          {!supported && !isWeb && (
            <Text style={{ marginTop: 8, color: '#EF4444' }}>
              Biometrics not available or not enrolled.
            </Text>
          )}
        </View>
        <Switch
          value={enabled}
          onValueChange={onToggle}
          disabled={!supported || isWeb}
        />
      </View>
    </View>
  );
}

3) Login screen button (no password call after success)
// /src/screens/LoginScreen.tsx
import React, { useEffect, useState } from 'react';
import { View, Text, TextInput, TouchableOpacity, Alert, Platform } from 'react-native';
import { biometricLogin, getEnabled } from '../services/biometrics';

export default function LoginScreen({ onLogin }: { onLogin: (session: any)=>void }) {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [bioEnabled, setBioEnabled] = useState(false);
  const isWeb = Platform.OS === 'web';

  useEffect(() => { (async()=> setBioEnabled(await getEnabled()))(); }, []);

  async function handlePasswordLogin() {
    // Your existing email/password call
    // const session = await api.login({ email, password });
    // onLogin(session);
  }

  async function handleBiometricLogin() {
    try {
      const session = await biometricLogin();
      onLogin(session);
    } catch (e: any) {
      Alert.alert("Biometrics", e.message ?? "Could not sign in.");
    }
  }

  return (
    <View style={{ padding: 20 }}>
      <Text style={{ fontSize: 24, fontWeight: '700', marginBottom: 16 }}>Welcome to Thryvin’</Text>

      <TextInput placeholder="Email" autoCapitalize="none" value={email} onChangeText={setEmail}
        style={{ borderWidth: 1, borderColor: '#e5e7eb', padding: 12, borderRadius: 12, marginBottom: 12 }} />
      <TextInput placeholder="Password" secureTextEntry value={password} onChangeText={setPassword}
        style={{ borderWidth: 1, borderColor: '#e5e7eb', padding: 12, borderRadius: 12, marginBottom: 16 }} />

      <TouchableOpacity onPress={handlePasswordLogin}
        style={{ backgroundColor: '#7A3CF3', padding: 14, borderRadius: 12, alignItems: 'center', marginBottom: 12 }}>
        <Text style={{ color: '#fff', fontWeight: '600' }}>Sign in</Text>
      </TouchableOpacity>

      {!isWeb && bioEnabled && (
        <TouchableOpacity onPress={handleBiometricLogin}
          style={{ borderColor: '#7A3CF3', borderWidth: 1.5, padding: 12, borderRadius: 12, alignItems: 'center' }}>
          <Text style={{ color: '#7A3CF3', fontWeight: '600' }}>Use Face/Touch ID</Text>
        </TouchableOpacity>
      )}
    </View>
  );
}

4) What to change on your backend (summary)

POST /auth/biometrics/register (auth required) → returns a device token (unique, revocable) tied to {userId, deviceId}.

POST /auth/biometrics/login → takes {deviceToken} and returns a normal session {accessToken, user}.

POST /auth/biometrics/revoke → revokes a device token.

(Until your backend is ready, the sample uses temporary “fake” stubs so the UI works end-to-end.)